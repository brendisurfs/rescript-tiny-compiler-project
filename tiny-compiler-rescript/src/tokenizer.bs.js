// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("rescript/lib/js/caml_array.js");

function makeStringFromMatch(chars, current, $$break) {
  var stringArr = [];
  var maxLen = chars.length - 1 | 0;
  while($$break.contents === false && current.contents < maxLen) {
    var currentChar = Caml_array.get(chars, current.contents);
    if (currentChar === " ") {
      $$break.contents = true;
    } else {
      console.log(currentChar);
      stringArr.push(currentChar);
      console.log("curr: ", stringArr);
      current.contents = current.contents + 1 | 0;
    }
  };
  return stringArr.join("");
}

function tokenize(input) {
  new RegExp("/\\s/");
  var numRegex = new RegExp("/[0-9]/");
  var lettersRegex = new RegExp("/[a-z]/");
  var current = {
    contents: 0
  };
  var $$break = {
    contents: false
  };
  var chars = input.split("");
  var tokens = chars.map(function ($$char) {
        numRegex.test($$char);
        lettersRegex.test($$char);
        switch ($$char) {
          case " " :
              return {
                      name: "space",
                      value: $$char
                    };
          case "(" :
          case ")" :
              current.contents = current.contents + 1 | 0;
              return {
                      name: "paren",
                      value: $$char
                    };
          default:
            var combinedString = makeStringFromMatch(chars, current, $$break);
            return {
                    name: "letter",
                    value: combinedString
                  };
        }
      });
  console.log(tokens);
  
}

exports.makeStringFromMatch = makeStringFromMatch;
exports.tokenize = tokenize;
/* No side effect */
