// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("rescript/lib/js/caml_array.js");

function makeStringFromMatch(chars, current, $$break) {
  var stringsArr = [];
  while($$break.contents !== true) {
    var currentChar = Caml_array.get(chars, current.contents + 1 | 0);
    var nextChar = Caml_array.get(chars, current.contents + 2 | 0);
    console.log("nextchar: " + nextChar);
    if (nextChar === " ") {
      $$break.contents = true;
    } else {
      current.contents = current.contents + 1 | 0;
      stringsArr.push(currentChar);
    }
  };
  return stringsArr.join("");
}

function tokenize(input) {
  var current = {
    contents: 0
  };
  var wsRegex = /\s/;
  var numRegex = /[0-9]/;
  var lowercaseRegex = /^[a-z]/;
  var uppercaseRegex = /^[A-Z]+$/;
  var chars = input.split("");
  var tokens = chars.map(function ($$char) {
        var isNum = numRegex.test($$char);
        var isWhitespace = wsRegex.test($$char);
        var isUpper = uppercaseRegex.test($$char);
        var isLower = lowercaseRegex.test($$char);
        if ($$char === "(" || $$char === ")") {
          current.contents = current.contents + 1 | 0;
          return {
                  name: "paren",
                  value: $$char
                };
        } else if (isWhitespace) {
          current.contents = current.contents + 1 | 0;
          return {
                  name: "space",
                  value: $$char
                };
        } else if (isUpper) {
          current.contents = current.contents + 1 | 0;
          return {
                  name: "upper",
                  value: $$char
                };
        } else if (isLower) {
          current.contents = current.contents + 1 | 0;
          return {
                  name: "lower",
                  value: $$char
                };
        } else if (isNum) {
          return {
                  name: "number",
                  value: $$char
                };
        } else {
          return {
                  name: "noop",
                  value: ""
                };
        }
      });
  var onlyUppers = tokens.filter(function (v) {
          return v.name === "upper";
        }).reduce((function (prev, next) {
          var comboValue = prev.value.concat(next.value);
          return {
                  name: "upper",
                  value: comboValue
                };
        }), {
        name: "",
        value: ""
      });
  console.log(onlyUppers);
  
}

exports.makeStringFromMatch = makeStringFromMatch;
exports.tokenize = tokenize;
/* No side effect */
